using System;
using System.IO;

namespace BMP_example
{
    class Program
    {
        static void Main(string[] args)
        {
            using (FileStream file = new FileStream("Kvadratai.bmp", FileMode.Create, FileAccess.Write))
            {
                //Sudaromas bmp formato monochrominis 1000x1000 taškų paveikslėlis
                file.Write(
                new byte[62]
                {
                    //Antraštė
                    0x42, 0x4d,
                    0x3e, 0xf4, 0x1, 0x0,
                    0x0, 0x0, 0x0, 0x0,
                    0x3e, 0x0, 0x0, 0x0,
                    //Antraštės informacija
                    0x28, 0x0, 0x0, 0x0,
                    0xe8, 0x3, 0x0, 0x0,
                    0xe8, 0x3, 0x0, 0x0,
                    0x1, 0x0,
                    0x1, 0x0,
                    0x0, 0x0, 0x0, 0x0,
                    0x0, 0xf4, 0x0, 0x0,
                    0x0, 0x0, 0x0, 0x0,
                    0x0, 0x0, 0x0, 0x0,
                    0x0, 0x0, 0x0, 0x0,
                    0x0, 0x0, 0x0, 0x0,
                    //Spalvų lentelė 
                    //0xff, 0x0, 0x0, 0x0,
                    //0x0, 0x0, 0xff, 0x0
                    0xff, 0x0, 0x0, 0x0,
                    0xff, 0x0, 0xff, 0x0
                });
                
                //Suskaičiuojame bmp paveikslėlio eilutės duomenų kiekį baitais (4 kartotinis) 1000 bit / 32 bit = 31,25 tokiu atveju eilutei reikės 32 baitų po 4 
                int l = 128;
                //Apibrėžiame taškų masyvą. Masyvo pirmo taško spalvą atitiks masyvo pirmo bito reikšmė
                var t = new byte[1000 * l];

                int generacija = 4;//Kelintą generacija sukurti
                int kvadrato_siena = 216;

                Rekursija(generacija, t, kvadrato_siena, 0, 0,l);
                Rekursija(generacija-1, t, kvadrato_siena, 0, 0,l);

                file.Write(t);
                file.Close();
            }
        }


        /// <summary>
        /// This method creates fractal using recursion
        /// </summary>
        /// <param name="n">generation</param>
        /// <param name="t">array of bits</param>
        /// <param name="kvadr">length of square's edge</param>
        /// <param name="kvadr_pries">length of previous generation's square's edge</param>
        /// <param name="sk1">position in byte array</param>
        /// <param name="l">length of line</param>
        static void Rekursija(int n, byte[] t, int kvadr, int kvadr_pries, int sk1,int l)
        {
            if (n < 1)
                return;

            if (sk1 < 1) sk1 = (500 - (kvadr / 2)) * l + 64 - (kvadr / 16);
            int temp_sk1 = sk1;

            //Paišome kvadratus 216x216 taškų, kurie susijungia kampais.
            for (int ii = 0; ii < 5; ii++)
            {
                sk1 = temp_sk1;
                switch (ii)
                {
                    //vidurys
                    case 0:
                        Rekursija(n - 1, t, kvadr / 3, kvadr, sk1 + ((kvadr / 3)) * l + (kvadr / 3) / 8,l);
                        break;
                    //desine virsus
                    case 1:
                        sk1 = sk1 + kvadr * l + kvadr / 8;
                        Rekursija(n - 1, t, kvadr / 3, kvadr, sk1 + ((kvadr / 3)) * l + (kvadr / 3) / 8,l);
                        break;
                    //kaire virsus
                    case 2:
                        sk1 = sk1 + kvadr * l - kvadr / 8;
                        Rekursija(n - 1, t, kvadr / 3, kvadr, sk1 + (kvadr / 3) * l + (kvadr / 3) / 8,l);
                        break;
                    //desine apacia
                    case 3:
                        sk1 = sk1 - kvadr * l + kvadr / 8;
                        Rekursija(n - 1, t, kvadr / 3, kvadr, sk1 + (kvadr / 3) * l + (kvadr / 3) / 8,l);
                        break;
                    //kaire apacia
                    case 4:
                        sk1 = sk1 - kvadr * l - kvadr / 8;
                        Rekursija(n - 1, t, kvadr / 3, kvadr, sk1 + (kvadr / 3) * l + (kvadr / 3) / 8,l);
                        break;
                }

                for (int i = 0; i < kvadr; i++)
                {

                    for (int j = i * l; j < i * l + kvadr / 8; j++)
                    {
                        t[j + sk1] ^= 0xFF;
                    }

                    if (kvadr_pries > 0)
                    {
                        for (int k = 0; k < 4; k++)
                        {
                            int sk2 = temp_sk1-l*kvadr-kvadr/8;
                            switch (k)
                            {
                                //virsus desine
                                case 0:
                                    sk2 = sk2 + (kvadr + kvadr_pries) * l + kvadr / 8 + kvadr_pries / 8;
                                    break;

                                //virsus kaire
                                case 1:
                                    sk2 = sk2 + (kvadr + kvadr_pries) * l + kvadr / 8 - kvadr_pries / 8;
                                    break;

                                //apacia desine
                                case 2:
                                    sk2 = sk2 - 2 * kvadr * l + kvadr / 8 + kvadr_pries / 8;
                                    break;

                                //apacia kaire
                                case 3:
                                    sk2 = sk2 - 2 * kvadr * l + kvadr / 8 - kvadr_pries / 8;
                                    break;


                            }
                            switch (ii)
                            {
                                case 0:
                                    break;
                                //desine virsus
                                case 1:
                                    sk2 = sk2 + kvadr * l + kvadr / 8;
                                    break;
                                //kaire virsus
                                case 2:
                                    sk2 = sk2 + kvadr * l - kvadr / 8;
                                    break;
                                //desine apacia
                                case 3:
                                    sk2 = sk2 - kvadr * l + kvadr / 8;
                                    break;
                                //kaire apacia
                                case 4:
                                    sk2 = sk2 - kvadr * l - kvadr / 8;
                                    break;
                            }
                        }
                    }
                }

            }

        }
    }
}
